{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/beta/Documents/react/polyhack/SBB_Polyhack/client/src/containers/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Map } from '../components/Map/MapboxMap';\nimport { Titlebar } from '../components/Titlebar/Titlebar';\nimport { Infobar } from '../components/Infobar/Infobar';\nimport { Searchbar } from '../components/Searchbar/Searchbar';\nimport { Navbar } from '../components/Navbar/Navbar';\nimport { MyForm } from '../components/Form/Form';\nimport React, { useState } from 'react';\nimport { Container, Row, Col } from 'react-grid-system';\nimport ReactDOM from \"react-dom\"; //import { Leaflet, Icon } from \"leaflet\";\n//import 'leaflet/dist/leaflet.css';\n\nconst App = () => {\n  _s();\n\n  const [origin, setOrigin] = useState([47.372406, 8.537606]);\n  const [markers, setMarkers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [lines, setLines] = useState([]);\n  const [ops, setOps] = useState([]); // raw data from backend - to be removed later\n\n  const [site, setSite] = useState(\"1\");\n  const [siteInfo, setSiteInfo] = useState({\n    'lat': 47.372406,\n    'long': 8.537606\n  });\n  const [activeLine, setActiveLine] = useState(undefined); // for now we're fetching the same data twice - the idea is to fetch markers \n  // from one route and the lines from another\n\n  {\n    /*\n     const fetchLines = async() => {\n       try {\n         const response = await fetch(\"/allops\");\n         const data = await response.json();\n         console.log(\"Fetching lines successful!\");\n         const dataArr = data.map(el => [el.lat, el.long]);\n         console.log(dataArr);\n         setLines(dataArr);\n       } catch (err) {\n         console.log(\"There was a problem with backend connection\");\n         return;\n       }\n     }\n    */\n  }\n\n  const fetchLines = async () => {\n    try {\n      const response = await fetch(\"/alllines\");\n      const data = await response.json();\n      console.log(\"Fetching lines successful!\"); //const dataArr = data.map(el => [el.lat, el.long]);\n      //console.log(dataArr);\n\n      let dataArr = [];\n\n      for (let lineIndex = 0; lineIndex < data.length; lineIndex++) {\n        let line = {\n          admin: data[lineIndex].admin,\n          lnumber: data[lineIndex].lnumber,\n          name: data[lineIndex].name,\n          segments: []\n        };\n\n        for (let opIndex = 1; opIndex < data[lineIndex].ops.length; opIndex++) {\n          let opFrom = data[lineIndex].ops[opIndex - 1];\n          let opTo = data[lineIndex].ops[opIndex];\n          let id = line.lnumber.toString() + \"_\" + opIndex.toString();\n          let name = line.name;\n          let lnumber = line.lnumber;\n          let admin = line.admin; //line.segments.push({name, lnumber, admin, opFrom, opTo, id});\n\n          dataArr.push({\n            name,\n            lnumber,\n            admin,\n            opFrom,\n            opTo,\n            id\n          });\n        } //dataArr.push(line)\n\n      }\n\n      console.log(dataArr);\n      setLines(dataArr);\n      setOps(data);\n    } catch (err) {\n      console.log(\"There was a problem with backend connection\");\n      return;\n    }\n  };\n\n  const fetchMarkers = async () => {\n    try {\n      const response = await fetch(\"/allops\");\n      const data = await response.json();\n      console.log(\"Fetching markers successful!\");\n      console.log(data);\n      setMarkers(data);\n    } catch (err) {\n      console.log(\"There was a problem with backend connection\");\n      return;\n    }\n  };\n\n  const fetchData = async () => {\n    setLoading(true); //await fetchMarkers();\n\n    await fetchLines();\n    setLoading(false);\n    const test = markers.filter(marker => marker.name === site);\n    console.log(\"Test filter\");\n    console.log(test);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Titlebar, {\n        text: \"Find the Bootleneck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"left-container\",\n            xs: 2,\n            style: {\n              backgroundColor: '#2F4989'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"map-container\",\n            xs: 7.8,\n            style: {\n              backgroundColor: \"#e62b19\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n              fetchMarkers: fetchData,\n              style: {\n                color: \"black\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Map, {\n              markers: markers,\n              lines: lines,\n              origin: origin,\n              setSite: setSite,\n              setSiteInfo: setSiteInfo,\n              setActiveLine: setActiveLine,\n              activeLine: activeLine,\n              style: {\n                width: \"100%\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: 2,\n            style: {\n              backgroundColor: '#2F4989'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info-container\",\n              style: {\n                backgroundColor: '#2F4989',\n                width: \"18rem\",\n                height: \"400pt\",\n                border: \"none\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Infobar, {\n                num: site,\n                site_info: siteInfo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Infobar, {\n                num: site,\n                site_info: siteInfo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"tTN9Mc2kjpsFqlUwRDW4e20yu6c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/beta/Documents/react/polyhack/SBB_Polyhack/client/src/containers/App.js"],"names":["Map","Titlebar","Infobar","Searchbar","Navbar","MyForm","React","useState","Container","Row","Col","ReactDOM","App","origin","setOrigin","markers","setMarkers","loading","setLoading","lines","setLines","ops","setOps","site","setSite","siteInfo","setSiteInfo","activeLine","setActiveLine","undefined","fetchLines","response","fetch","data","json","console","log","dataArr","lineIndex","length","line","admin","lnumber","name","segments","opIndex","opFrom","opTo","id","toString","push","err","fetchMarkers","fetchData","test","filter","marker","backgroundColor","color","width","height","border"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport {Map} from '../components/Map/MapboxMap';\nimport {Titlebar} from '../components/Titlebar/Titlebar';\nimport {Infobar} from '../components/Infobar/Infobar';\nimport {Searchbar} from '../components/Searchbar/Searchbar';\nimport {Navbar} from '../components/Navbar/Navbar';\nimport {MyForm} from '../components/Form/Form';\nimport React, { useState } from 'react';\nimport { Container, Row, Col } from 'react-grid-system'\nimport ReactDOM from \"react-dom\";\n//import { Leaflet, Icon } from \"leaflet\";\n//import 'leaflet/dist/leaflet.css';\n\n\nconst App = () => {\n\n  const [origin, setOrigin] = useState([47.372406, 8.537606 ]);\n  const [markers, setMarkers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [lines, setLines] = useState([]);\n  const [ops, setOps] = useState([]); // raw data from backend - to be removed later\n  const [site, setSite] = useState(\"1\");\n  const [siteInfo, setSiteInfo] = useState({'lat': 47.372406, 'long': 8.537606});\n  const [activeLine, setActiveLine] = useState(undefined);\n\n// for now we're fetching the same data twice - the idea is to fetch markers \n// from one route and the lines from another\n\n{/*\n  const fetchLines = async() => {\n    try {\n      const response = await fetch(\"/allops\");\n      const data = await response.json();\n      console.log(\"Fetching lines successful!\");\n      const dataArr = data.map(el => [el.lat, el.long]);\n      console.log(dataArr);\n      setLines(dataArr);\n    } catch (err) {\n      console.log(\"There was a problem with backend connection\");\n      return;\n    }\n  }\n*/}\nconst fetchLines = async() => {\n  try {\n    const response = await fetch(\"/alllines\");\n    const data = await response.json();\n    console.log(\"Fetching lines successful!\");\n    //const dataArr = data.map(el => [el.lat, el.long]);\n    //console.log(dataArr);\n    let dataArr = [];\n    for (let lineIndex = 0; lineIndex < data.length; lineIndex++) {\n      let line = {\n        admin: data[lineIndex].admin,\n        lnumber: data[lineIndex].lnumber,\n        name: data[lineIndex].name,\n        segments: []\n      }\n      for (let opIndex = 1; opIndex < data[lineIndex].ops.length; opIndex++) {\n        let opFrom = data[lineIndex].ops[opIndex-1];\n        let opTo = data[lineIndex].ops[opIndex];\n        let id = line.lnumber.toString() + \"_\" + opIndex.toString();\n        let name = line.name;\n        let lnumber = line.lnumber;\n        let admin = line.admin;\n        //line.segments.push({name, lnumber, admin, opFrom, opTo, id});\n        dataArr.push({name, lnumber, admin, opFrom, opTo, id});\n      }\n      //dataArr.push(line)\n    }\n    console.log(dataArr);\n    setLines(dataArr);\n    setOps(data);\n  } catch (err) {\n    console.log(\"There was a problem with backend connection\");\n    return;\n  }\n}\n\n  const fetchMarkers = async() => {\n    try {\n      const response = await fetch(\"/allops\");\n      const data = await response.json();\n      console.log(\"Fetching markers successful!\");\n      console.log(data);\n      setMarkers(data);\n    } catch (err) {\n      console.log(\"There was a problem with backend connection\");\n      return;\n    }\n  }\n\n  const fetchData = async() => {\n    setLoading(true);\n    //await fetchMarkers();\n    await fetchLines();\n    setLoading(false)\n    const test = markers.filter(marker => marker.name === site);\n    console.log(\"Test filter\")\n    console.log(test)\n  }\n  \n\n  return ( \n    <div>\n      {loading ? <div>Loading</div> : \n    \n    <div>\n    <Titlebar text={\"Find the Bootleneck\"}/> \n    <Container>\n    <Row>\n      \n       <Col className=\"left-container\"\n        xs={2}\n        style={{backgroundColor:'#2F4989'}}>\n        </Col>\n\n        <Col className=\"map-container\" xs={7.8} style={{backgroundColor:\"#e62b19\"}}>\n        <Searchbar fetchMarkers={fetchData} style={{color: \"black\"}}/>\n        <Map markers={markers} lines={lines} origin={origin} setSite={setSite} setSiteInfo={setSiteInfo} setActiveLine={setActiveLine} activeLine={activeLine} style={{width: \"100%\"}}/>\n        </Col>\n\n        <Col xs={2} style={{backgroundColor:'#2F4989'}}>\n          <div className=\"info-container\" style={{backgroundColor:'#2F4989', width: \"18rem\", height:\"400pt\", border:\"none\"}}>\n              <Infobar num={site} site_info={siteInfo}  />\n              <Infobar num={site} site_info={siteInfo} />\n              {/*<Infobar num={3, \"18rem\"}/>\n              <Infobar num={4, \"18rem\"}/>\n              <Infobar num={5, \"18rem\"}/>\n              <Infobar num={6, \"18rem\"}/>*/}\n          </div>\n        </Col>\n      </Row>\n      \n      </Container>\n\n    </div>\n    }\n    </div>\n   );\n}\n \nexport default App;\n"]},"metadata":{},"sourceType":"module"}