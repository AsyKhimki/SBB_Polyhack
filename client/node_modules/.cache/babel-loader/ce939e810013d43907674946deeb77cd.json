{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { useLayerLifecycle } from './layer';\nexport function usePathOptions(element, props) {\n  var optionsRef = useRef();\n  useEffect(function updatePathOptions() {\n    if (props.pathOptions !== optionsRef.current) {\n      var _props$pathOptions;\n\n      var options = (_props$pathOptions = props.pathOptions) != null ? _props$pathOptions : {};\n      element.instance.setStyle(options);\n      optionsRef.current = options;\n    }\n  }, [element, props]);\n}\nexport function createPathHook(useElement) {\n  return function usePath(props) {\n    var context = useLeafletContext();\n    var elementRef = useElement(props, context);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    usePathOptions(elementRef.current, props);\n    return elementRef;\n  };\n}","map":{"version":3,"sources":["/home/beta/Documents/react/bottleneck/node_modules/@react-leaflet/core/esm/path.js"],"names":["useEffect","useRef","useLeafletContext","useEventHandlers","useLayerLifecycle","usePathOptions","element","props","optionsRef","updatePathOptions","pathOptions","current","_props$pathOptions","options","instance","setStyle","createPathHook","useElement","usePath","context","elementRef","eventHandlers"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,gBAAT,QAAiC,UAAjC;AACA,SAASC,iBAAT,QAAkC,SAAlC;AACA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,KAAjC,EAAwC;AAC7C,MAAMC,UAAU,GAAGP,MAAM,EAAzB;AACAD,EAAAA,SAAS,CAAC,SAASS,iBAAT,GAA6B;AACrC,QAAIF,KAAK,CAACG,WAAN,KAAsBF,UAAU,CAACG,OAArC,EAA8C;AAC5C,UAAIC,kBAAJ;;AAEA,UAAMC,OAAO,GAAG,CAACD,kBAAkB,GAAGL,KAAK,CAACG,WAA5B,KAA4C,IAA5C,GAAmDE,kBAAnD,GAAwE,EAAxF;AACAN,MAAAA,OAAO,CAACQ,QAAR,CAAiBC,QAAjB,CAA0BF,OAA1B;AACAL,MAAAA,UAAU,CAACG,OAAX,GAAqBE,OAArB;AACD;AACF,GARQ,EAQN,CAACP,OAAD,EAAUC,KAAV,CARM,CAAT;AASD;AACD,OAAO,SAASS,cAAT,CAAwBC,UAAxB,EAAoC;AACzC,SAAO,SAASC,OAAT,CAAiBX,KAAjB,EAAwB;AAC7B,QAAMY,OAAO,GAAGjB,iBAAiB,EAAjC;AACA,QAAMkB,UAAU,GAAGH,UAAU,CAACV,KAAD,EAAQY,OAAR,CAA7B;AACAhB,IAAAA,gBAAgB,CAACiB,UAAU,CAACT,OAAZ,EAAqBJ,KAAK,CAACc,aAA3B,CAAhB;AACAjB,IAAAA,iBAAiB,CAACgB,UAAU,CAACT,OAAZ,EAAqBQ,OAArB,CAAjB;AACAd,IAAAA,cAAc,CAACe,UAAU,CAACT,OAAZ,EAAqBJ,KAArB,CAAd;AACA,WAAOa,UAAP;AACD,GAPD;AAQD","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { useLayerLifecycle } from './layer';\nexport function usePathOptions(element, props) {\n  const optionsRef = useRef();\n  useEffect(function updatePathOptions() {\n    if (props.pathOptions !== optionsRef.current) {\n      var _props$pathOptions;\n\n      const options = (_props$pathOptions = props.pathOptions) != null ? _props$pathOptions : {};\n      element.instance.setStyle(options);\n      optionsRef.current = options;\n    }\n  }, [element, props]);\n}\nexport function createPathHook(useElement) {\n  return function usePath(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(props, context);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    usePathOptions(elementRef.current, props);\n    return elementRef;\n  };\n}"]},"metadata":{},"sourceType":"module"}