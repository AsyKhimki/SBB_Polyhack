{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/beta/Documents/react/polyhack/SBB_Polyhack/client/src/containers/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Map } from '../components/Map/MapboxMap';\nimport { Titlebar } from '../components/Titlebar/Titlebar';\nimport { Infobar } from '../components/Infobar/Infobar';\nimport { Searchbar } from '../components/Searchbar/Searchbar';\nimport { Navbar } from '../components/Navbar/Navbar';\nimport { MyForm } from '../components/Form/Form';\nimport React, { useState } from 'react';\nimport ReactDOM from \"react-dom\"; //import { Leaflet, Icon } from \"leaflet\";\n//import 'leaflet/dist/leaflet.css';\n\nconst App = () => {\n  _s();\n\n  const [origin, setOrigin] = useState([47.372406, 8.537606]);\n  const [markers, setMarkers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [ops, setOps] = useState([]); // raw data from backend - to be removed later\n\n  const [lines, setLines] = useState([]); // for now we're fetching the same data twice - the idea is to fetch markers \n  // from one route and the lines from another\n\n  const fetchLines = async () => {\n    try {\n      const response = await fetch(\"/alllines\");\n      const data = await response.json();\n      console.log(\"Fetching lines successful!\"); //const dataArr = data.map(el => [el.lat, el.long]);\n      //console.log(dataArr);\n\n      let dataArr = [];\n\n      for (let lineIndex = 0; lineIndex < data.length; lineIndex++) {\n        let line = {\n          admin: data[lineIndex].admin,\n          lnumber: data[lineIndex].lnumber,\n          name: data[lineIndex].name,\n          segments: []\n        };\n\n        for (let opIndex = 1; opIndex < data[lineIndex].ops.length; opIndex++) {\n          let opFrom = data[lineIndex].ops[opIndex - 1];\n          let opTo = data[lineIndex].ops[opIndex];\n          line.segments.push({\n            opFrom,\n            opTo\n          });\n        }\n\n        dataArr.push(line);\n      }\n\n      console.log(dataArr);\n      setLines(data);\n      setOps(dataArr);\n    } catch (err) {\n      console.log(\"There was a problem with backend connection\");\n      return;\n    }\n  };\n\n  const fetchMarkers = async () => {\n    try {\n      const response = await fetch(\"/allops\");\n      const data = await response.json();\n      console.log(\"Fetching markers successful!\");\n      console.log(data);\n      setMarkers(data);\n    } catch (err) {\n      console.log(\"There was a problem with backend connection\");\n      return;\n    }\n  };\n\n  const fetchData = async () => {\n    setLoading(true); //await fetchMarkers();\n\n    await fetchLines();\n    setLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Titlebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        width: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"left-container\",\n              style: {\n                backgroundColor: '#2F4989'\n              },\n              children: /*#__PURE__*/_jsxDEV(MyForm, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"map-container\",\n              children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n                fetchMarkers: fetchData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Map, {\n                markers: markers,\n                lines: lines,\n                origin: origin\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-container\",\n                style: {\n                  backgroundColor: '#2F4989',\n                  width: \"18rem\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(Infobar, {\n                  num: (1, \"18rem\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(Infobar, {\n                  num: (2, \"18rem\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(Infobar, {\n                  num: (3, \"18rem\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(Infobar, {\n                  num: (4, \"18rem\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(Infobar, {\n                  num: (5, \"18rem\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(Infobar, {\n                  num: (6, \"18rem\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"6yhVofeILymxvPanu+MqdIUL0SU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/beta/Documents/react/polyhack/SBB_Polyhack/client/src/containers/App.js"],"names":["Map","Titlebar","Infobar","Searchbar","Navbar","MyForm","React","useState","ReactDOM","App","origin","setOrigin","markers","setMarkers","loading","setLoading","ops","setOps","lines","setLines","fetchLines","response","fetch","data","json","console","log","dataArr","lineIndex","length","line","admin","lnumber","name","segments","opIndex","opFrom","opTo","push","err","fetchMarkers","fetchData","backgroundColor","width"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport {Map} from '../components/Map/MapboxMap';\nimport {Titlebar} from '../components/Titlebar/Titlebar';\nimport {Infobar} from '../components/Infobar/Infobar';\nimport {Searchbar} from '../components/Searchbar/Searchbar';\nimport {Navbar} from '../components/Navbar/Navbar';\nimport {MyForm} from '../components/Form/Form';\nimport React, { useState } from 'react';\nimport ReactDOM from \"react-dom\";\n//import { Leaflet, Icon } from \"leaflet\";\n//import 'leaflet/dist/leaflet.css';\n\n\nconst App = () => {\n  const [origin, setOrigin] = useState([47.372406, 8.537606 ]);\n  const [markers, setMarkers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [ops, setOps] = useState([]); // raw data from backend - to be removed later\n  const [lines, setLines] = useState([]);\n\n// for now we're fetching the same data twice - the idea is to fetch markers \n// from one route and the lines from another\n  const fetchLines = async() => {\n    try {\n      const response = await fetch(\"/alllines\");\n      const data = await response.json();\n      console.log(\"Fetching lines successful!\");\n      //const dataArr = data.map(el => [el.lat, el.long]);\n      //console.log(dataArr);\n      let dataArr = [];\n      for (let lineIndex = 0; lineIndex < data.length; lineIndex++) {\n        let line = {\n          admin: data[lineIndex].admin,\n          lnumber: data[lineIndex].lnumber,\n          name: data[lineIndex].name,\n          segments: []\n        }\n        for (let opIndex = 1; opIndex < data[lineIndex].ops.length; opIndex++) {\n          let opFrom = data[lineIndex].ops[opIndex-1];\n          let opTo = data[lineIndex].ops[opIndex];\n          line.segments.push({opFrom, opTo});\n        }\n        dataArr.push(line)\n      }\n      console.log(dataArr);\n      setLines(data);\n      setOps(dataArr);\n    } catch (err) {\n      console.log(\"There was a problem with backend connection\");\n      return;\n    }\n  }\n\n  const fetchMarkers = async() => {\n    try {\n      const response = await fetch(\"/allops\");\n      const data = await response.json();\n      console.log(\"Fetching markers successful!\");\n      console.log(data);\n      setMarkers(data);\n    } catch (err) {\n      console.log(\"There was a problem with backend connection\");\n      return;\n    }\n  }\n\n  const fetchData = async() => {\n    setLoading(true);\n    //await fetchMarkers();\n    await fetchLines();\n    setLoading(false)\n  }\n\n  return ( \n    <div>\n      {loading ? <div>Loading</div> : \n    <div>\n    <Titlebar />\n    <Navbar />\n    <table width=\"100%\">\n    <tbody>\n      <tr>\n        <td className=\"left-container\"\n        style={{backgroundColor:'#2F4989'}}>\n        <MyForm />\n        </td>\n        <td className=\"map-container\">\n        <Searchbar fetchMarkers={fetchData}/>\n        <Map markers={markers} lines={lines} origin={origin}/>\n        </td>\n        <td>\n          <div className=\"info-container\" style={{backgroundColor:'#2F4989', width: \"18rem\"}}>\n              <Infobar num={1, \"18rem\"}/>\n              <Infobar num={2, \"18rem\"}/>\n              <Infobar num={3, \"18rem\"}/>\n              <Infobar num={4, \"18rem\"}/>\n              <Infobar num={5, \"18rem\"}/>\n              <Infobar num={6, \"18rem\"}/>\n        </div>\n        </td>\n      </tr>     \n      </tbody>\n      </table> \n    </div>\n    }\n    </div>\n   );\n}\n \nexport default App;\n"]},"metadata":{},"sourceType":"module"}