{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/beta/Documents/react/polyhack/SBB_Polyhack/client/src/components/Map/MapboxMap.jsx\";\n//import \"./MapboxMap.css\";\nimport React, { useState } from \"react\";\nimport { MapContainer, Marker, Polyline, Popup, TileLayer, Circle } from \"react-leaflet\";\nimport { opacityById, weightById, colorById } from \"./stylize_elements.js\";\nimport { MapLine, MapActiveLine, MapConstrLine, MapConstrPoint, MapProblemLine } from \"./Line\";\nimport { act } from \"react-dom/test-utils\";\nexport const Map = ({\n  markers,\n  lines,\n  origin,\n  setSite,\n  setSiteInfo,\n  setActiveLine,\n  activeLine,\n  construct,\n  problems,\n  startDate,\n  setNumcnst,\n  showpo\n}) => {\n  const sample_line = [{\n    from_lat: \"47.372406\",\n    from_long: \"8.537606\",\n    id: \"1\",\n    to_lat: \"46.951368\",\n    to_long: \"7.451401\"\n  }, {\n    from_lat: \"47.372406\",\n    from_long: \"8.537606\",\n    id: \"2\",\n    to_lat: \"47.539976\",\n    to_long: \"7.579924\"\n  }];\n  const test_city = {\n    id: \"GE\",\n    lat: \"46.236360\",\n    lon: \"6.139854\",\n    full_name: \"Geneva\",\n    status: \"Lockdown\",\n    details: \"What a pity\"\n  };\n\n  const handleClick = event => {\n    const {\n      lat,\n      lng\n    } = event.latlng;\n    console.log(`Clicked at ${lat}, ${lng}`);\n  };\n\n  var cnt = 0;\n  console.log({\n    showpo\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: origin,\n      zoom: 7,\n      scrollWheelZoom: true,\n      click: handleClick,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"Map data \\xA9 <a href=\\\"https://www.openstreetmap.org/\\\">OpenStreetMap</a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA</a>, Imagery \\xA9 <a href=\\\"https://www.mapbox.com/\\\">Mapbox</a>\",\n        url: \"https://api.mapbox.com/styles/v1/beta-sheet/ckh6dba8002u21aob78yl7tep/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiYmV0YS1zaGVldCIsImEiOiJja2g2ZG5hN3QwYzlyMnJxY3hrYmtybHZqIn0.SEa-JVt3EsXaPGgx-4mnYA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), showpo ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: markers.map(marker => {\n          return /*#__PURE__*/_jsxDEV(Circle, {\n            center: {\n              lat: marker.lat,\n              lng: marker.long\n            },\n            fillColor: \"green\",\n            radius: 1000,\n            eventHandlers: {\n              click: () => {\n                // console.log(\"Circle Has been clicked\")\n                console.log(\"Print lines\");\n                console.log(lines);\n                console.log(\"Print construction sites\");\n                console.log(construct);\n                setSite(marker.name);\n                const test = markers.filter(x => x.name === marker.name);\n                setSiteInfo(test[0]);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(MapConstrLine, {\n        construct: construct.filter(obj => {\n          var date_from = new Date(obj.date_from);\n          var date_to = new Date(obj.date_to); //console.log(date_from.getTime() > startDate.getTime() );\n\n          var ans = date_from.getTime() <= startDate.getTime() && date_to.getTime() >= startDate.getTime();\n          cnt = ans ? cnt + 1 : cnt;\n          setNumcnst(cnt); //console.log(\"number of constructions\")\n          //console.log(cnt);\n\n          console.log(ans);\n          return ans;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MapConstrPoint, {\n        construct: construct.filter(obj => {\n          var date_from = new Date(obj.date_from);\n          var date_to = new Date(obj.date_to); //console.log(date_from.getTime() > startDate.getTime() );\n\n          var ans = date_from.getTime() <= startDate.getTime() && date_to.getTime() >= startDate.getTime();\n          cnt = ans ? cnt + 1 : cnt;\n          setNumcnst(cnt); //console.log(\"number of constructions\")\n          //console.log(cnt);\n\n          console.log(ans);\n          return ans;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MapLine, {\n        lines: lines,\n        activeLine: activeLine,\n        setActiveLine: setActiveLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), activeLine && /*#__PURE__*/_jsxDEV(MapActiveLine, {\n        activeLine: activeLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/beta/Documents/react/polyhack/SBB_Polyhack/client/src/components/Map/MapboxMap.jsx"],"names":["React","useState","MapContainer","Marker","Polyline","Popup","TileLayer","Circle","opacityById","weightById","colorById","MapLine","MapActiveLine","MapConstrLine","MapConstrPoint","MapProblemLine","act","Map","markers","lines","origin","setSite","setSiteInfo","setActiveLine","activeLine","construct","problems","startDate","setNumcnst","showpo","sample_line","from_lat","from_long","id","to_lat","to_long","test_city","lat","lon","full_name","status","details","handleClick","event","lng","latlng","console","log","cnt","map","marker","long","click","name","test","filter","x","obj","date_from","Date","date_to","ans","getTime"],"mappings":"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","sourcesContent":["//import \"./MapboxMap.css\";\nimport React, { useState } from \"react\";\nimport {\n  MapContainer,\n  Marker,\n  Polyline,\n  Popup,\n  TileLayer,\n  Circle,\n} from \"react-leaflet\";\nimport { opacityById, weightById, colorById } from \"./stylize_elements.js\";\nimport {\n  MapLine,\n  MapActiveLine,\n  MapConstrLine,\n  MapConstrPoint,\n  MapProblemLine,\n} from \"./Line\";\nimport { act } from \"react-dom/test-utils\";\n\nexport const Map = ({\n  markers,\n  lines,\n  origin,\n  setSite,\n  setSiteInfo,\n  setActiveLine,\n  activeLine,\n  construct,\n  problems,\n  startDate,\n  setNumcnst,\n  showpo,\n}) => {\n  const sample_line = [\n    {\n      from_lat: \"47.372406\",\n      from_long: \"8.537606\",\n      id: \"1\",\n      to_lat: \"46.951368\",\n      to_long: \"7.451401\",\n    },\n    {\n      from_lat: \"47.372406\",\n      from_long: \"8.537606\",\n      id: \"2\",\n      to_lat: \"47.539976\",\n      to_long: \"7.579924\",\n    },\n  ];\n\n  const test_city = {\n    id: \"GE\",\n    lat: \"46.236360\",\n    lon: \"6.139854\",\n    full_name: \"Geneva\",\n    status: \"Lockdown\",\n    details: \"What a pity\",\n  };\n\n  const handleClick = (event) => {\n    const { lat, lng } = event.latlng;\n    console.log(`Clicked at ${lat}, ${lng}`);\n  };\n\n  var cnt = 0;\n\n  console.log({ showpo });\n\n  return (\n    <div>\n      <MapContainer\n        center={origin}\n        zoom={7}\n        scrollWheelZoom={true}\n        click={handleClick}\n      >\n        <TileLayer\n          attribution='Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery &copy; <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n          url=\"https://api.mapbox.com/styles/v1/beta-sheet/ckh6dba8002u21aob78yl7tep/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiYmV0YS1zaGVldCIsImEiOiJja2g2ZG5hN3QwYzlyMnJxY3hrYmtybHZqIn0.SEa-JVt3EsXaPGgx-4mnYA\"\n        />\n\n        {showpo ? (\n          <div>\n            {markers.map((marker) => {\n              return (\n                <Circle\n                  center={{ lat: marker.lat, lng: marker.long }}\n                  fillColor=\"green\"\n                  radius={1000}\n                  eventHandlers={{\n                    click: () => {\n                      // console.log(\"Circle Has been clicked\")\n                      console.log(\"Print lines\");\n                      console.log(lines);\n                      console.log(\"Print construction sites\");\n                      console.log(construct);\n                      setSite(marker.name);\n                      const test = markers.filter(\n                        (x) => x.name === marker.name\n                      );\n                      setSiteInfo(test[0]);\n                    },\n                  }}\n                />\n              );\n            })}\n          </div>\n        ) : null}\n\n        {\n          <MapConstrLine\n            construct={construct.filter((obj) => {\n              var date_from = new Date(obj.date_from);\n              var date_to = new Date(obj.date_to);\n              //console.log(date_from.getTime() > startDate.getTime() );\n              var ans =\n                date_from.getTime() <= startDate.getTime() &&\n                date_to.getTime() >= startDate.getTime();\n              cnt = ans ? cnt + 1 : cnt;\n              setNumcnst(cnt);\n              //console.log(\"number of constructions\")\n              //console.log(cnt);\n              console.log(ans);\n              return ans;\n            })}\n          />\n        }\n\n        {\n          <MapConstrPoint\n            construct={construct.filter((obj) => {\n              var date_from = new Date(obj.date_from);\n              var date_to = new Date(obj.date_to);\n              //console.log(date_from.getTime() > startDate.getTime() );\n              var ans =\n                date_from.getTime() <= startDate.getTime() &&\n                date_to.getTime() >= startDate.getTime();\n              cnt = ans ? cnt + 1 : cnt;\n              setNumcnst(cnt);\n              //console.log(\"number of constructions\")\n              //console.log(cnt);\n              console.log(ans);\n              return ans;\n            })}\n          />\n        }\n\n        {/*      <div>\n          {construct.filter( obj => {\n              var date_from = new Date(obj.date_from);\n              var date_to = new Date(obj.date_to);\n              //console.log(date_from.getTime() > startDate.getTime() );\n              var ans = date_from.getTime() <= startDate.getTime() && date_to.getTime() >= startDate.getTime()\n              cnt = ans ? cnt + 1 : cnt ;\n              setNumcnst(cnt);\n              //console.log(\"number of constructions\")\n              //console.log(cnt);\n              return ans\n          })\n          .map((cnst) => {\n\n            return (\n              <Polyline\n                \n                positions={[\n                  [cnst.ops[0].lat, cnst.ops[0].long],\n                  [cnst.ops[1].lat, cnst.ops[1].long],\n                ]}\n                color={\"red\"}\n                stroke={true}\n                opacity={0.25}\n                bubblingMouseEvents={false}\n                weight={10}\n              />\n            );\n\n            \n          })}\n\n        </div> */}\n\n        {/*\n        <Marker position={[47.372406, 8.537606]}>\n          <Popup>\n            Welcome to Zurich. <br /> Easily customizable.\n          </Popup>\n        </Marker> */}\n\n        {/* TRY out polylines \n        see properties\n        https://leafletjs.com/reference-1.7.1.html#path\n        */}\n\n        <MapLine\n          lines={lines}\n          activeLine={activeLine}\n          setActiveLine={setActiveLine}\n        />\n\n        {activeLine && <MapActiveLine activeLine={activeLine} />}\n\n        {/* Add new type of a marker\n         */}\n\n        {/*\n        <Marker\n          eventHandlers={{\n            click: () => {\n              console.log(\"marker clicked\");\n            },\n          }}\n          key={test_city.id}\n          position={{ lat: 46.23636, lng: 6.139854 }}\n        >\n          <Popup>\n            <span>\n              {test_city.full_name}\n              <br />\n              {test_city.status}\n              <br />\n              {test_city.details}\n              <br />\n            </span>\n          </Popup>\n          <Circle\n            eventHandlers={{\n              click: () => {\n                console.log(\"circle clicked\");\n              },\n            }}\n            center={{ lat: 46.23636, lng: 6.139854 }}\n            fillColor=\"red\"\n            radius={1000}\n          />\n          </Marker> */}\n      </MapContainer>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}